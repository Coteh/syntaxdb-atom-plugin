[
    {
        "id": 72,
        "concept_name": "Primitive Data Types",
        "category_id": 25,
        "position": 7,
        "language_id": 4,
        "concept_search": "Primitive Data Types in C#",
        "concept_permalink": "data-types",
        "description": "To declare the type of data for the value of a variable. Primitive data types include: int, short, long, byte, float, double, char, and boolean.",
        "syntax": "dataType variableName;",
        "notes": "Integer valued data types include: int (4byte), short (2byte), long (8byte), and byte (1byte).\r\n\r\nFloating-point data types include: float (4byte), and double (8byte). \r\n\r\nChar is a 16bit character using Unicode encoding. \r\n\r\nBoolean is a true or false value. \r\n\r\nC# also supports complex data types such as strings and objects. It also allows for user-defined types through class and interface definitions. \r\n\r\nStrings in C# are used with the String class, however the data type 'string' acts as an alias for System.String.",
        "example": "int hour = 5; \r\nfloat cpuTime = 3.14; \r\nbool hasStarted = true; \r\nchar yesNo = 'y'; \r\nSystem.String message = \"Random Data Declarations!\"; \r\nstring month = \"January\";",
        "keywords": "",
        "related": "<a href=\"/ref/csharp/variable-dec\">Variable Declaration</a>",
        "documentation": "<a href=\"https://msdn.microsoft.com/en-us/library/ms173104.aspx\">Types (C# Programming Reference) - MSDN</a>",
        "language_permalink": "csharp"
    },
    {
        "id": 210,
        "concept_name": "Variable Declaration",
        "category_id": 25,
        "position": 8,
        "language_id": 4,
        "concept_search": "Variable Declaration in C#",
        "concept_permalink": "variable-dec",
        "description": "Used to declare a variable. Variables can be implicitly or explicitly typed.\r\n\r\nVariables declared this way (without a static modifier) within classes are called instance variables. They belong to an instance of the class (i.e. an object).",
        "syntax": "modifier dataType variableName; ///modifier is optional\r\n\r\n///variables can be assigned values either separately or on declaration\r\nvariableName = value; ///separate line assignment\r\n\r\nmodifier dataType variableName = value; ///same line assignment\r\n\r\n///implicitly typed variable\r\nvar variable2 = value;",
        "notes": "The modifier (public, private) permits or restricts direct access to the variable with respect to its scope (class, method, etc.). Variables declared within a class are called fields.\r\n\r\nVariables without a modifier are known as local variables, typically used within a method. They are temporary and only exist within the scope of the where its declared method.\r\n\r\ndataType is the data type of the variable. ",
        "example": "public class Car { \r\n    private int speed; ///private variable declaration\r\n    public int wheels; ///public variable declaration\r\n    \r\n    /*...constructor, etc...*/\r\n\r\n    public void speedUp() {\r\n        ///local variable declaration, in line assignment, only seen within speedUp method\r\n        int speedIncrease = 10;\r\n        speed += speedIncrease;\r\n    }\r\n}",
        "keywords": "fields",
        "related": "<a href=\"/ref/csharp/access-mod\">Access Modifiers</a>\r\n<a href=\"/ref/csharp/data-types\">Primitive Data Types</a>",
        "documentation": "<a href=\"https://msdn.microsoft.com/en-us/library/ms173104.aspx\">Types (C# Programming Reference) - MSDN</a>",
        "language_permalink": "csharp"
    },
    {
        "id": 227,
        "concept_name": "Parse",
        "category_id": 25,
        "position": 9,
        "language_id": 4,
        "concept_search": "Parse in C#",
        "concept_permalink": "parse",
        "description": "Used to parse (convert) a string into a primitive data type.",
        "syntax": "///standard parse\r\ndataType variableName = dataType.Parse(stringName);\r\n\r\n///tryParse takes care of failure by assigning a default value, no need for try-catch\r\ndataType result;\r\nbool didItWork = dataType.TryParse(stringName, out result);",
        "notes": "A standard parse throws an exception if the string cannot be converted to the specified type. It should be used inside a try-catch block.\r\n\r\nTryParse returns a boolean to show whether or not the parsing worked. The second argument is used for the output variable, the 'out' keyword assigns the value to the variable.",
        "example": "string yearString = \"2015\";\r\nint year;\r\nbool validYear = int.TryParse(yearString, out year);\r\n",
        "keywords": "convert",
        "related": "<a href=\"/ref/csharp/try-catch\">Try-Catch Block</a>",
        "documentation": "\r\n",
        "language_permalink": "csharp"
    },
    {
        "id": 71,
        "concept_name": "Constants",
        "category_id": 25,
        "position": 10,
        "language_id": 4,
        "concept_search": "Constants in C#",
        "concept_permalink": "constants",
        "description": "Constants are used to declare an identifier whose associated value cannot be altered during the execution of the program.",
        "syntax": "modifier const variableType variableName = value;",
        "notes": "variableType is the type (boolean, float, int, void, etc.) of the specified variable.  \r\n\r\nConstants cannot be static.",
        "example": "public const int AGE = 20; \r\nprivate const string VEHICLE = \"Convertible\" ;",
        "keywords": "",
        "related": "<a href=\"/ref/csharp/access-mod\">Access Modifiers</a>",
        "documentation": "<a href=\"https://msdn.microsoft.com/en-us/library/ms173119.aspx\">Constants</a>",
        "language_permalink": "csharp"
    },
    {
        "id": 75,
        "concept_name": "Pointers and References",
        "category_id": 25,
        "position": 11,
        "language_id": 4,
        "concept_search": "Pointers and References in C#",
        "concept_permalink": "pointers",
        "description": "To store an address in memory of a variable. A pointer is a variable itself and has a value whereas a reference only has a variable that it is referencing.",
        "syntax": "dataType *pointerName = &Variable; //Pointer \r\n\r\nref dataType Variable; //Reference \r\n\r\ndataType *pointerName = malloc( sizeof (*pointerName)); \r\n//Memory allocation of the pointer, of whatever data type it is. \r\n\r\nfree(pointerName); //Free the memory used by the pointer.",
        "notes": "A pointer can be reassigned, set to NULL, incremented/decremented, etc, while a reference can only refer to one object (they cannot reference NULL). \r\n\r\nYou can take the address of a pointer, but you cannot take the address of a reference. \r\n\r\nGenerally we use references in function parameters and return types, whereas we use pointers to implement data structures/algorithms. \r\n\r\nSince a pointer has memory, it needs to allocate the memory its using (to the size of its data type) and must be freed after use of the pointer, (using stackalloc). \r\n\r\n'fixed' is used to temporarily fix a variable so its address can be obtained. ",
        "example": "int x = 5; int *pointer = NULL; \r\nint *pointer = &x; \r\nFunction(ref value);",
        "keywords": null,
        "related": null,
        "documentation": null,
        "language_permalink": "csharp"
    },
    {
        "id": 73,
        "concept_name": "Arrays",
        "category_id": 25,
        "position": 12,
        "language_id": 4,
        "concept_search": "Arrays in C#",
        "concept_permalink": "array",
        "description": "An array is used to assign a series of elements of the same type in consecutive memory locations; to define a list of elements.",
        "syntax": "dataType[] arrayName = new dataType[arraySize]; \r\ndataType[] arrayName = {values,..,â€¦};\r\ndataType[,] arrayName = new dataType[rows, columns]; \r\ndataType[][] arrayName = new dataType[rows][columns];\r\n\r\narrayName[elementPosition] = arrayElement; \r\n//To set a value at a specific position in the array \r\n\r\nvariableType Variable = arrayName[elementPosition]; \r\n//To access a specific element and store in a variable. ",
        "notes": "dataType can be any C# data type, all elements in the array must be of this data type. arrayName is defined by the programmer. arraySize and elementPosition are integers.\r\n\r\nThe index value (elementPositions) starts at 0.",
        "example": "int[] array = {1,2,3}; \r\narray[4] = 4; //Note: new array is = {1,2,3,0,4} \r\nint startValue = array[0];",
        "keywords": "",
        "related": "",
        "documentation": "",
        "language_permalink": "csharp"
    },
    {
        "id": 229,
        "concept_name": "Lists",
        "category_id": 25,
        "position": 13,
        "language_id": 4,
        "concept_search": "Lists in C#",
        "concept_permalink": "lists",
        "description": "Lists are like arrays, but more flexible. They are mutable and can be dynamically sized.",
        "syntax": "///the { } and initial values are optional\r\nList<GenericDataType> listName = new List<GenericDataType>() {value1, value2};\r\n///add a value\r\nlistName.add(value);",
        "notes": "The generic data types can contain primitive types or types like objects.",
        "example": "List<double> grades = new List<double>{95.0}; //declaring an array of size 2 \r\ngrades.add(85.3); ",
        "keywords": "arrays array arraylist dynamic",
        "related": "<a href=\"/ref/csharp/arrays\">Arrays</a>",
        "documentation": "<a href=\"https://msdn.microsoft.com/en-us/library/6sh2ey19(v=vs.110).aspx\">List(T) Class - MSDN</a>",
        "language_permalink": "csharp"
    },
    {
        "id": 230,
        "concept_name": "Dictionaries",
        "category_id": 25,
        "position": 14,
        "language_id": 4,
        "concept_search": "Dictionaries in C#",
        "concept_permalink": "dictionaries",
        "description": "A dictionary is used to store key-value pairs.",
        "syntax": "///creating a dictionary\r\nDictionary<Key_DataType, Value_DataType> dictionaryName = new Dictionary<Key_DataType, Value_DataType>();\r\n\r\n//adding values to the hash map\r\ndictionaryName.Add(key, value);\r\n\r\n//getting value from key\r\nkeyValue = dictionary[\"key\"]",
        "notes": "It is equivalent to a HashMap in Java, or an object in JavaScript.\r\nThe data types are generic types.\r\nThe ContainsKey method verifies the presence of the key in the dictionary.",
        "example": "public Dictionary<string, int> grades = new Dictionary<string, int>();\r\ngrades.put(\"Paul\", 70);\r\ngrades.put(\"Adam\", 85);\r\n\r\nConsole.WriteLine(grades[\"Paul\"]); //will get the value associated with Paul, 70",
        "keywords": "hash hashtable map maps dictionary hashmap hash table",
        "related": "",
        "documentation": "<a href=\"https://msdn.microsoft.com/en-us/library/xfhwa508(v=vs.110).aspx\">Dictionary(TKey, TValue) - MSDN</a>",
        "language_permalink": "csharp"
    },
    {
        "id": 301,
        "concept_name": "Type Conversion",
        "category_id": 25,
        "position": 15,
        "language_id": 4,
        "concept_search": "Type Conversion in C#",
        "concept_permalink": "type-convert",
        "description": "The Convert class is used to convert one data type into another one.",
        "syntax": "dataType variable = System.Convert.ToDataType(otherTypeVariable);",
        "notes": "DataType is a base type class, like Int16 or String.\r\n\r\nThis is typically used in a try-catch block in case of conversion failure.",
        "example": "double x = 1.3;\r\ntry \r\n{\r\n  int x_integer = System.Convert.ToInt16(x);\r\n} catch (OverflowException)\r\n{\r\n  Console.WriteLine(\"Overflow error\");\r\n}",
        "keywords": "type cast typecast conversion toint",
        "related": "",
        "documentation": "<a href=\"https://msdn.microsoft.com/en-us/library/system.convert(v=vs.110).aspx\">Convert Class - MSDN</a>",
        "language_permalink": "csharp"
    },
    {
        "id": 77,
        "concept_name": "Structures",
        "category_id": 25,
        "position": 16,
        "language_id": 4,
        "concept_search": "Structures in C#",
        "concept_permalink": "struct",
        "description": "To define a type/structure to store several data items and variables.",
        "syntax": "struct structureName { \r\n   //member declarations \r\n};",
        "notes": "Structures can be passed as function arguments (using the struct data type). \r\n\r\nTo define a specific structure declaration, use the member access operator (.). \r\n\r\nStructures can be pointed to, similarly to pointing to variables. To access a member of the structure using pointers, the -> operator must be used. \r\n\r\nStructure must be declared as an instance to be accessed. (struct Car car1;).",
        "example": "struct Car { \r\n   string make; \r\n   string model; \r\n   int year;\r\n}; ",
        "keywords": "",
        "related": "",
        "documentation": "",
        "language_permalink": "csharp"
    }
]
