[
    {
        "id": 5,
        "concept_name": "For Loop",
        "category_id": 3,
        "position": 17,
        "language_id": 1,
        "concept_search": "For Loop in Java",
        "concept_permalink": "for-loop",
        "description": "The for loop is a control structure that executes a block of code a specified number of times.\r\n",
        "syntax": "for(initialization; booleanExpression; update) {\r\n    //statements\r\n} //end for loop\r\n",
        "notes": "Initialization declares the initial value of the controlling variable. The controlling variable can be defined in-line with the for loop, or defined previously. Typically, the for loop uses an integer variable.\r\n\r\nbooleanExpression is the controlling statement that must be true in order for the 'for' structure to loop and execute. booleanExpression must result in either a true or false output. It is created using comparing operators (==, >, <, >=, <=, !=). There can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !). \r\n\r\nUpdate is the change in the controlling variable that occurs after each execution of the statements. It performs an arithmetic operation on the controlling variable.",
        "example": "for(int x = 0; x <10; x++) { \r\n    System.out.println(x); \r\n} //x will continue to increment while it remains less than 10.\r\n",
        "keywords": "",
        "related": "",
        "documentation": "",
        "language_permalink": "java"
    },
    {
        "id": 35,
        "concept_name": "For Loop",
        "category_id": 10,
        "position": 13,
        "language_id": 2,
        "concept_search": "For Loop in C",
        "concept_permalink": "for-loop",
        "description": "The for loop is a control structure that executes a block of code a specified number of times.",
        "syntax": "int controllingVariable;\r\n\r\nfor(initialization; booleanExpression; update) {\r\n    //statements\r\n} //end for loop",
        "notes": "Initialization declares the initial value of the controlling variable. The controlling variable must be declared previously (if using C99 or above, declaration in line is allowed). Typically, the for loop uses an integer variable.\r\n\r\nbooleanExpression is the controlling statement that must be true in order for the 'for' structure to loop and execute. booleanExpression must result in either a true or false output. It is created using comparing operators (==, >, =, <=, !=). ; There can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !).\r\n\r\nUpdate is the change in the controlling variable that occurs after each execution of the statements. It performs an arithmetic operation on the controlling variable.",
        "example": "int x; //controlling variable declaration\r\nfor(x = 0; x <10; x++) { \r\n     printf(\" %d\", x); \r\n} //x will continue to increment while it remains less than 10.\r\n",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"http://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#The-for-Statement\">GNU C Manual - for Statement</a>",
        "language_permalink": "c"
    },
    {
        "id": 57,
        "concept_name": "For Loop",
        "category_id": 15,
        "position": 19,
        "language_id": 3,
        "concept_search": "For Loop in C++",
        "concept_permalink": "for-loop",
        "description": "The for loop is used to use a control structure that executes a block of code a specified number of times.",
        "syntax": "int controllingVariable;\r\n \r\nfor(initialization; booleanExpression; update) {\r\n    //statements\r\n} //end for loop",
        "notes": "Initialization declares the initial value of the controlling variable. The controlling variable must be declared previously (if using C99 or above, declaration in line is allowed). Typically, the for loop uses an integer variable.\r\n\r\nbooleanExpression is the controlling statement that must be true in order for the 'for' structure to loop and execute. booleanExpression must result in either a true or false output. It is created using comparing operators (==, >, =, <=, !=). ; There can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !).\r\n\r\nUpdate is the change in the controlling variable that occurs after each execution of the statements. It performs an arithmetic operation on the controlling variable.",
        "example": "using namespace std;\r\n\r\nint x; //controlling variable declaration\r\nfor(x = 0; x <10; x++) { \r\n     cout << x << endl; \r\n} //x will continue to increment while it remains less than 10.",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"http://www.cplusplus.com/doc/tutorial/control/\">Statements and flow control - C++ Tutorials</a>",
        "language_permalink": "cpp"
    },
    {
        "id": 84,
        "concept_name": "For Loop",
        "category_id": 21,
        "position": 19,
        "language_id": 4,
        "concept_search": "For Loop in C#",
        "concept_permalink": "forloop",
        "description": "The for loop is a control structure that executes a block of code a specified number of times.",
        "syntax": "for (initialization; booleanExpression; update) { \r\n   //statements \r\n}",
        "notes": "initialization declares the initial value of the controling variable. \r\n\r\nupdate is the change in the controling variable that occurs after each execution of the statements. \r\n\r\nbooleanExpression is the controling statement that must be true in order for the 'for' structure to loop and execute. \r\n\r\nbooleanExpression results in either a true or false output. It is created using comparing operators (==, >, <, >=, <=, !=). \r\n\r\nThere can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !). ",
        "example": "for (int x = 0; x <10; x++) { \r\n   Console.WriteLine(x); \r\n} //x will continue to increment while it remains less than 10.",
        "keywords": "",
        "related": "",
        "documentation": "",
        "language_permalink": "csharp"
    },
    {
        "id": 116,
        "concept_name": "For Loop",
        "category_id": 29,
        "position": 13,
        "language_id": 8,
        "concept_search": "For Loop in Ruby",
        "concept_permalink": "for-loop",
        "description": "To run a block of code a specified number of times",
        "syntax": "#range is represented as lower_limit..upper_limit\r\nfor x in range\r\n    #run code from lower limit to upper limit of range\r\n    #x keeps track of which iteration\r\nend",
        "notes": "The for loop is typically used when the number of needed iterations is known.",
        "example": "#fizzbuzz exercise, iterating from 1 to 100\r\nfor x in 1..100\r\n    word = nil\r\n    if x % 15 == 0\r\n        puts \"fizzbuzz\"\r\n    elsif x % 3 == 0\r\n        puts \"fizz\"\r\n    elsif x % 5 == 0\r\n        puts \"buzz\"\r\n    else\r\n        puts \"fizzbuzz\"\r\n    end\r\nend",
        "keywords": "for loop iteration",
        "related": "",
        "documentation": "<a href=\"http://ruby-doc.org/docs/Tutorial/part_02/loops.html\">Ruby Tutorial - Loops</a>",
        "language_permalink": "ruby"
    },
    {
        "id": 158,
        "concept_name": "For Loop",
        "category_id": 35,
        "position": 11,
        "language_id": 10,
        "concept_search": "For Loop in JavaScript",
        "concept_permalink": "for-loop",
        "description": "The for loop is used to use a control structure that executes a block of code a specified number of times.",
        "syntax": "for(initialization; booleanExpression; update) {\r\n    //statements\r\n} //end for loop",
        "notes": "Initialization declares the initial value of the controlling variable. The controlling variable can be defined in-line with the for loop, or defined previously. Typically, the for loop uses an integer variable.\r\n\r\nbooleanExpression is the controlling statement that must be true in order for the 'for' structure to loop and execute. booleanExpression must result in either a true or false output. It is created using comparing operators (==, >, =, <=, !=). ; There can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !).\r\n\r\nUpdate is the change in the controlling variable that occurs after each execution of the statements. It performs an arithmetic operation on the controlling variable.",
        "example": "for(var x = 0; x <10; x++) { \r\n    console.log(x); \r\n} //x will continue to increment while it remains less than 10.",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\">for - JavaScript | MDN</a>",
        "language_permalink": "javascript"
    },
    {
        "id": 191,
        "concept_name": "For Loop",
        "category_id": 40,
        "position": 14,
        "language_id": 7,
        "concept_search": "For Loop in Python",
        "concept_permalink": "for-loop",
        "description": "The for loop is used to iterate through a sequence. When a range is provided as the sequence, it behaves like a C-style for loop. For all other sequences (arrays, etc.), it behaves like a for each loop. ",
        "syntax": "# for-each behaviour\r\nfor element in sequence:\r\n    #code to perform, on element\r\n\r\n# C-style for loop behaviour, start index is optional\r\nfor element in range(start, finish):\r\n   #code to execute\r\n",
        "notes": "A sequence can be a list, set, or range.\r\n\r\nThe control structure takes an element from the sequence and executes the statements. It  then continues to do the same on subsequent elements until there are no more elements in the sequence.\r\n\r\nIteration through a range is done in numerical order. Iteration through a non-range sequence has no guarantee of order.",
        "example": "grades = [85, 95, 80]\r\n\r\nfor grade in grades:\r\n    print (\"Student grade: {}\".format(grade))",
        "keywords": "for each foreach",
        "related": "",
        "documentation": "<a href=\"https://docs.python.org/3/tutorial/controlflow.html#\">More Control Flow Tools - Python Reference</a>",
        "language_permalink": "python"
    },
    {
        "id": 286,
        "concept_name": "For Loop",
        "category_id": 52,
        "position": 20,
        "language_id": 13,
        "concept_search": "For Loop in Go",
        "concept_permalink": "for-loop",
        "description": "The for loop is a control structure that executes a block of code a specified number of times.",
        "syntax": "for initialization; booleanExpression; update {\r\n    //do something\r\n}",
        "notes": "Initialization declares the initial value of the controlling variable. The controlling variable can be defined in-line with the for loop, or defined previously. Typically, the for loop uses an integer variable.\r\n\r\nbooleanExpression is the controlling statement that must be true in order for the 'for' structure to loop and execute. booleanExpression must result in either a true or false output. It is created using comparing operators (==, >, =, <=, !=). ; There can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !).\r\n\r\nUpdate is the change in the controlling variable that occurs after each execution of the statements. It performs an arithmetic operation on the controlling variable.",
        "example": "for x := 0; x <10; x++ { \r\n    fmt.Println(x) \r\n} //x will continue to increment while it remains less than 10.",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"https://golang.org/doc/effective_go.html#for\">Effective Go - The Go Programming Language</a>",
        "language_permalink": "go"
    },
    {
        "id": 244,
        "concept_name": "For In Loop",
        "category_id": 46,
        "position": 13,
        "language_id": 11,
        "concept_search": "For In Loop in Swift",
        "concept_permalink": "for-in",
        "description": "The for-in loop iterates through every element in a collection (array, set, or dictionary) without specifying size. It behaves like a for each in other languages.\r\n\r\nThe C-style for loop is now deprecated in Swift. To emulate the C-style for loop, use a range as the collection.",
        "syntax": "//temporary iterator implicitly declared in the loop\r\nfor iteratorVariable in collectionName {\r\n    //the individual element is held in the iterator variable\r\n    //to access the value, just use iteratorVariable\r\n}\r\n\r\n//C-style for loop behavior, start...finish provides the range and increments the iterator by 1\r\nfor iteratorVariable in start...finish {\r\n\r\n}",
        "notes": "For a dictionary, the two iterator variables are provided in brackets, separated by comma (key, value). ",
        "example": "var studentGrades: [Integer] = [50, 89, 75]; \r\n\r\nfor grade in studentGrades { \r\n    print \"Grade: \\(grade)\"\r\n} //prints each value of the array studentGrades (each loop is an element of studentGrades assigned to grade variable)",
        "keywords": "for-each for each foreach for loop for in iterator",
        "related": "",
        "documentation": "<a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html\">The Swift Programming Language - Control Flow</a>",
        "language_permalink": "swift"
    },
    {
        "id": 11,
        "concept_name": "For Each",
        "category_id": 3,
        "position": 18,
        "language_id": 1,
        "concept_search": "For Each in Java",
        "concept_permalink": "for-each",
        "description": "The for-each loop iterates through every element in the array, without specifying size. ",
        "syntax": "//temporary iterator variable is declared in the loop\r\nfor(dataType iteratorVariable : IterableObject){\r\n    //the individual element is held in the iterator variable\r\n    //to access the value, just use iteratorVariable\r\n}",
        "notes": "Each element is assigned a temporary iterator variable, declared in the for-each structure. \r\n\r\nAn IterableObject is any object which implements the Iterable interface. \r\n\r\nThe iterator variable must be of the element's data type. Arrays are traversed in order (zero to size), but traversal order is not guaranteed for other Iterable objects.",
        "example": "char[] studentGrades = {50, 89, 75}; \r\n\r\nfor(char grade: studentGrades) { \r\n    System.out.println(\"Grade: \" + grade); \r\n} //prints each value of the array studentGrades (each loop is an element of studentGrades assigned to grade variable).\r\n",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"https://docs.oracle.com/javase/1.5.0/docs/guide/language/foreach.html\">Oracle Documentation - The For-Each Loop</a>\r\n\r\n<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable - Java Docs</a>",
        "language_permalink": "java"
    },
    {
        "id": 117,
        "concept_name": "For Each",
        "category_id": 29,
        "position": 14,
        "language_id": 8,
        "concept_search": "For Each in Ruby",
        "concept_permalink": "for-each",
        "description": "The for-each loop iterates through every element in the array, without specifying size.",
        "syntax": "array.each do |element|\r\n    #code to perform, on element\r\nend",
        "notes": "Each element is assigned a temporary iterator variable, declared in the for-each structure.\r\n\r\nElements are not accessed in any particular order.",
        "example": "grades.each do |grade|\r\n    puts \"Student grade: {grade}\"\r\nend",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"http://ruby-doc.org/docs/Tutorial/part_02/loops.html\">Introduction to Ruby - Loops</a>",
        "language_permalink": "ruby"
    },
    {
        "id": 287,
        "concept_name": "For Each",
        "category_id": 52,
        "position": 21,
        "language_id": 13,
        "concept_search": "For Each in Go",
        "concept_permalink": "for-each",
        "description": "The for-each loop iterates through every element in an array, slice, string, or map without specifying the length. It uses the range keyword.",
        "syntax": "for key, value := range collection {\r\n    //the individual keys and values are held in the iterator variable\r\n    //key or value can be dropped if one or the other is not needed using '_'\r\n}",
        "notes": "Each element is assigned temporary iterator variables, declared in the for-each structure.\r\n\r\nFor any associative data structure, to get only values, use 'for _, value'. To get only keys, use 'for key'. \r\n\r\nOrder is not necessarily guaranteed in a for each iteration.",
        "example": "studentGrades := [3]int{50, 89, 75}\r\n\r\nfor _, grade := range studentGrades { \r\n    fmt.Println(\"Grade: \", grade)\r\n} //prints each value of the array studentGrades (each loop is an element of studentGrades assigned to grade variable).",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"https://golang.org/doc/effective_go.html#for\">Effective Go - The Go Programming Language</a>",
        "language_permalink": "go"
    },
    {
        "id": 208,
        "concept_name": "For Each",
        "category_id": 35,
        "position": 12,
        "language_id": 10,
        "concept_search": "For Each in JavaScript",
        "concept_permalink": "for-each",
        "description": "Used iterate through all elements in an array or object.",
        "syntax": "//iterator variable is declared in the for each loop\r\nfor (var iteratorVariable of object) {\r\n    //the individual element is held in the iterator variable\r\n    //to access the value, just use iteratorVariable\r\n}",
        "notes": "Each element is represented by a temporary iterator variable, declared in the for-each structure.\r\n\r\n\r\n\r\n",
        "example": "var studentGrades = [50, 89, 75]; \r\n\r\nfor (var grade of studentGrades) { \r\n    console.log(\"Grade: \" + grade); \r\n} //prints each value of the array studentGrades (each loop is an element of studentGrades assigned to grade variable).",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">for...in - JavaScript | MDN</a>",
        "language_permalink": "javascript"
    },
    {
        "id": 85,
        "concept_name": "For Each",
        "category_id": 21,
        "position": 20,
        "language_id": 4,
        "concept_search": "For Each in C#",
        "concept_permalink": "foreach",
        "description": "To use a control structure that executes a block of code a specified number of times, used primarily for arrays.",
        "syntax": "foreach (dataType valueName in arrayName) { \r\n   //statements \r\n}",
        "notes": "Same as the for loop with different formatting and used for arrays. \r\n\r\ndataType is the type of the valueName. valueName is defined element name for the array (arrayName). 'in' is used to associate each element with the array. \r\n\r\nForeach goes through the elements of the array in order. ",
        "example": "string[] workDays = {\"Monday\",\"Tuesday\", \"Wednesday\"};\r\n\r\nforeach (string day in workDays) { \r\n   Console.WriteLine(day); \r\n}",
        "keywords": "",
        "related": "",
        "documentation": "",
        "language_permalink": "csharp"
    },
    {
        "id": 288,
        "concept_name": "While Loop",
        "category_id": 52,
        "position": 22,
        "language_id": 13,
        "concept_search": "While Loop in Go",
        "concept_permalink": "while-loop",
        "description": "The while loop executes a block of code while a boolean expression evaluates to true. It terminates as soon as the expression evaluates to false. The boolean expression is evaluated before each iteration.\r\n\r\nInstead of using the 'while' keyword, it uses the 'for' keyword with only a Boolean expression.\r\n\r\nThere is no do-while loop in Go.",
        "syntax": "for booleanExpression {\r\n    //do something\r\n}",
        "notes": "Because the boolean expression is evaluated before each iteration, the block of code executes ONLY if the booleanExpression evaluates to true. \r\n\r\nbooleanExpression results in either a true or false output. It is created using comparing operators (==, >, =, <=, !=).\r\n\r\nThere can also be multiple boolean expressions. The boolean expressions are connected through logical operators (&&, ||, !).\r\n\r\nUsing no boolean expression creates an infinite loop, unless stopped using the 'break' statement.",
        "example": "x := 0 \r\nfor x < 10 { \r\n    fmt.Println(x) //prints x until x < 10 evaluates to false\r\n    x++ \r\n}",
        "keywords": "do while do-while",
        "related": "",
        "documentation": "<a href=\"https://golang.org/doc/effective_go.html#for\">Effective Go - The Go Programming Language</a>",
        "language_permalink": "go"
    },
    {
        "id": 12,
        "concept_name": "While Loop",
        "category_id": 3,
        "position": 19,
        "language_id": 1,
        "concept_search": "While Loop in Java",
        "concept_permalink": "while",
        "description": "The while loop executes a block of code while a boolean expression evaluates to true. It terminates as soon as the expression evaluates to false. The boolean expression is evaluated before each iteration.",
        "syntax": "while(booleanExpression) { \r\n    //block of code to be executed\r\n}\r\n",
        "notes": "Because the boolean expression is evaluated before each iteration, the block of code executes ONLY if the booleanExpression evaluates to true. If a guarantee is needed for the block of code to run at least once, use the do-while loop.\r\n\r\nbooleanExpression results in either a true or false output. It is created using comparing operators (==, >, <, >=, <=, !=). \r\n\r\nThere can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !). \r\n",
        "example": "int x = 0; \r\nwhile(x < 10) { \r\n    System.out.println(x); //prints x until x < 10 evaluates to false\r\nx++; \r\n}\r\n",
        "keywords": "",
        "related": "",
        "documentation": "",
        "language_permalink": "java"
    },
    {
        "id": 36,
        "concept_name": "While Loop",
        "category_id": 10,
        "position": 14,
        "language_id": 2,
        "concept_search": "While Loop in C",
        "concept_permalink": "while",
        "description": "The while loop executes a block of code while a boolean expression evaluates to true. It terminates as soon as the expression evaluates to false. The boolean expression is evaluated before each iteration.",
        "syntax": "while(booleanExpression) { \r\n    //block of code to be executed\r\n}",
        "notes": "Because the boolean expression is evaluated before each iteration, the block of code executes ONLY if the booleanExpression evaluates to true. If a guarantee is needed for the block of code to run at least once, use the do-while loop.\r\n\r\nbooleanExpression results in either a true or false output. It is created using comparing operators (==, >, =, <=, !=).\r\n\r\nThere can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !).",
        "example": "int timer = 0; \r\nwhile(timer < 10) { \r\n    printf(\"%d \\n\", timer); \r\n    timer++; \r\n}\r\n\r\n",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"http://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#The-while-Statement\">GNU C Manual - while Statement</a>",
        "language_permalink": "c"
    },
    {
        "id": 58,
        "concept_name": "While Loop",
        "category_id": 15,
        "position": 20,
        "language_id": 3,
        "concept_search": "While Loop in C++",
        "concept_permalink": "while",
        "description": "The while loop executes a block of code while a boolean expression evaluates to true. It terminates as soon as the expression evaluates to false. The boolean expression is evaluated before each iteration.",
        "syntax": "while(booleanExpression) { \r\n    //block of code to be executed\r\n}",
        "notes": "Because the boolean expression is evaluated before each iteration, the block of code executes ONLY if the booleanExpression evaluates to true. If a guarantee is needed for the block of code to run at least once, use the do-while loop.\r\n\r\nbooleanExpression results in either a true or false output. It is created using comparing operators (==, >, =, <=, !=).\r\n\r\nThere can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !).\r\n",
        "example": "using namespace std;\r\n\r\nint timer = 0; \r\nwhile(timer < 10) { \r\n    cout << timer << endl;\r\n    timer++; \r\n}",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"http://www.cplusplus.com/doc/tutorial/control/\">Statements and flow control - C++ Tutorials</a>",
        "language_permalink": "cpp"
    },
    {
        "id": 118,
        "concept_name": "While Loop",
        "category_id": 29,
        "position": 15,
        "language_id": 8,
        "concept_search": "While Loop in Ruby",
        "concept_permalink": "while",
        "description": "The while loop executes a block of code while a boolean expression evaluates to true. It terminates as soon as the expression evaluates to false. The boolean expression is evaluated before each iteration.",
        "syntax": "while booleanExpression do\r\n    #code to be run while booleanExpression is true\r\n    next (conditional_statement) #used to skip all code in block that follows if condition true\r\nend",
        "notes": "Because the boolean expression is evaluated before each iteration, the block of code executes ONLY if the booleanExpression evaluates to true. If a guarantee is needed for the block of code to run at least once, use the do-while loop.\r\n\r\nbooleanExpression results in either a true or false output. It is created using comparing operators (==, >, =, <=, !=).\r\n\r\nThere can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !).",
        "example": "while distance < 100\r\n    puts \"You have not finished the race\"\r\n    distance += 10\r\nend\r\n\r\nputs \"Race has finished!\"",
        "keywords": "",
        "related": "",
        "documentation": "",
        "language_permalink": "ruby"
    },
    {
        "id": 159,
        "concept_name": "While Loop",
        "category_id": 35,
        "position": 13,
        "language_id": 10,
        "concept_search": "While Loop in JavaScript",
        "concept_permalink": "while",
        "description": "The while loop executes a block of code while a boolean expression evaluates to true. It terminates as soon as the expression evaluates to false. The boolean expression is evaluated before each iteration.",
        "syntax": "while(booleanExpression) { \r\n    //block of code to be executed\r\n}",
        "notes": "Because the boolean expression is evaluated before each iteration, the block of code executes ONLY if the booleanExpression evaluates to true. If a guarantee is needed for the block of code to run at least once, use the do-while loop.\r\n\r\nbooleanExpression results in either a true or false output. It is created using comparing operators (==, >, =, <=, !=).\r\n\r\nThere can also be multiple boolean expressions within the parentheses (booleanExpression). The boolean expressions are connected through logical operators (&&, ||, !).",
        "example": "var x = 0; \r\nwhile(x < 10) { \r\n    console.log(x); //prints x until x < 10 evaluates to false\r\nx++; \r\n}",
        "keywords": "",
        "related": "",
        "documentation": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\">while - JavaScript | MDN</a>",
        "language_permalink": "javascript"
    }
]
